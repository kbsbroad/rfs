// Less RFS function
//
// Automated responsive values for font sizes, paddings, margins and much more
//
// See https://github.com/twbs/rfs

// Configuration

// Base value
@rfs-base-value: 1.25rem;
@rfs-unit: rem;

// Breakpoint at where value stops increasing
@rfs-breakpoint: 1200px;
@rfs-breakpoint-unit: px;

// Resize value based on screen height and width
@rfs-two-dimensional: false;

// Factor of decrease
@rfs-factor: 10;

// 1 rem = @rfs-rem-value px
@rfs-rem-value: 16;

// Disable RFS by setting @enable-rfs to false
@enable-rfs: true;

// RFS function
.rfs(@values) {
  ._rfs-calculate(1, "");
}

// Recursive calculate function
._rfs-calculate(@index, @valueResult) {

  & when (@index <= length(@values)) {
    @currentValue: extract(@values, @index);

    & when (not(isunit(@currentValue, px)) and not(isunit(@currentValue, rem))) {
      ._rfs-calculate((@index + 1), ~"@{valueResult} @{currentValue}");
    }

    & when ((isunit(@currentValue, px)) or (isunit(@currentValue, rem))) {
      @val: if(isunit(@currentValue, rem), unit(@currentValue * @rfs-rem-value), unit(@currentValue));

      // Remove unit if zero
      @value-unit: if(@val = 0, ~"", @rfs-unit);

      @renderedValue: unit(if(@rfs-unit = px, @val, @val / @rfs-rem-value), @value-unit);

      @rfs-min: if(isunit(@rfs-base-value, rem), unit(@rfs-base-value * @rfs-rem-value), unit(@rfs-base-value));

      & when (not((abs(@val) > @rfs-min) and (@rfs-factor > 1) and (@enable-rfs = true))) {
        ._rfs-calculate((@index + 1), ~"@{valueResult} @{renderedValue}");
      }

      & when ((abs(@val) > @rfs-min) and (@rfs-factor > 1) and (@enable-rfs = true)) {

        @breakpoint: if(isunit(@rfs-breakpoint, em) or isunit(@rfs-breakpoint, rem), unit(@rfs-breakpoint * @rfs-rem-value), unit(@rfs-breakpoint));
        @max-width: unit(if(@rfs-breakpoint-unit = px, @breakpoint, @breakpoint / @rfs-rem-value), @rfs-breakpoint-unit);

        // Calculate minimum value
        @value-min: @rfs-min + (abs(@val) - @rfs-min) / @rfs-factor;

        // Calculate difference between @val and the minimum value
        // Rounding needed to prevent rounding errors
        @value-variable-width: unit(round((abs(@val) - @value-min) / (@breakpoint / 100), 15), if(@rfs-two-dimensional, vmin, vw));

        & when (@val > 0) {
          @renderedFluidValue: calc(unit(if(@rfs-unit = px, @value-min, @value-min / @rfs-rem-value), @rfs-unit) ~"+" @value-variable-width);
          ._rfs-calculate((@index + 1), ~"@{valueResult} min(@{renderedValue}, @{renderedFluidValue})");
        }

        & when (@val < 0) {
          @renderedFluidValue: calc(unit(if(@rfs-unit = px, -@value-min, -@value-min / @rfs-rem-value), @rfs-unit) ~"-" @value-variable-width);
          ._rfs-calculate((@index + 1), ~"@{valueResult} min(@{renderedValue}, @{renderedFluidValue})");
        }
      }
    }
  }

  & when (@index > length(@values)) {
    --return: replace(@valueResult, ' ', '');
  }
}
